{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs2/helpers/interopRequireDefault\");\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime-corejs2/regenerator\"));\n\nvar _getIterator2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/get-iterator\"));\n\nvar _marked =\n/*#__PURE__*/\n_regenerator.default.mark(getFiles);\n\nvar fs = require('fs');\n\nvar path = require('path');\n\nvar paths = require('./paths');\n\nfunction getFiles(dirName) {\n  var dirPath, fileNames, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, fileName, filePath, file;\n\n  return _regenerator.default.wrap(function getFiles$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          dirPath = path.join(paths.assets, dirName);\n          fileNames = fs.readdirSync(dirPath);\n          _iteratorNormalCompletion = true;\n          _didIteratorError = false;\n          _iteratorError = undefined;\n          _context.prev = 5;\n          _iterator = (0, _getIterator2.default)(fileNames);\n\n        case 7:\n          if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {\n            _context.next = 16;\n            break;\n          }\n\n          fileName = _step.value;\n          filePath = path.join(dirPath, fileName);\n          file = fs.readFileSync(filePath, 'utf8');\n          _context.next = 13;\n          return {\n            fileName: fileName,\n            content: file\n          };\n\n        case 13:\n          _iteratorNormalCompletion = true;\n          _context.next = 7;\n          break;\n\n        case 16:\n          _context.next = 22;\n          break;\n\n        case 18:\n          _context.prev = 18;\n          _context.t0 = _context[\"catch\"](5);\n          _didIteratorError = true;\n          _iteratorError = _context.t0;\n\n        case 22:\n          _context.prev = 22;\n          _context.prev = 23;\n\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n\n        case 25:\n          _context.prev = 25;\n\n          if (!_didIteratorError) {\n            _context.next = 28;\n            break;\n          }\n\n          throw _iteratorError;\n\n        case 28:\n          return _context.finish(25);\n\n        case 29:\n          return _context.finish(22);\n\n        case 30:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[5, 18, 22, 30], [23,, 25, 29]]);\n}\n\nmodule.exports = {\n  getFiles: getFiles\n};","map":{"version":3,"sources":["/Users/hayashihitoshi/nextBlog/scripts/getContents.ts"],"names":["getFiles","fs","require","path","paths","dirName","dirPath","join","assets","fileNames","readdirSync","fileName","filePath","file","readFileSync","content","module","exports"],"mappings":";;;;;;;;;;0BAKUA,Q;;AALV,IAAMC,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAlB;;AACA,IAAMC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAApB;;AAEA,IAAME,KAAK,GAAGF,OAAO,CAAC,SAAD,CAArB;;AAEA,SAAUF,QAAV,CAAmBK,OAAnB;AAAA;;AAAA;AAAA;AAAA;AAAA;AACUC,UAAAA,OADV,GACoBH,IAAI,CAACI,IAAL,CAAUH,KAAK,CAACI,MAAhB,EAAwBH,OAAxB,CADpB;AAEUI,UAAAA,SAFV,GAEsBR,EAAE,CAACS,WAAH,CAAeJ,OAAf,CAFtB;AAAA;AAAA;AAAA;AAAA;AAAA,iDAI2BG,SAJ3B;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIeE,UAAAA,QAJf;AAKcC,UAAAA,QALd,GAKyBT,IAAI,CAACI,IAAL,CAAUD,OAAV,EAAmBK,QAAnB,CALzB;AAMcE,UAAAA,IANd,GAMqBZ,EAAE,CAACa,YAAH,CAAgBF,QAAhB,EAA0B,MAA1B,CANrB;AAAA;AAQQ,iBAAM;AACFD,YAAAA,QAAQ,EAAEA,QADR;AAEFI,YAAAA,OAAO,EAAEF;AAFP,WAAN;;AARR;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAgBAG,MAAM,CAACC,OAAP,GAAiB;AACbjB,EAAAA,QAAQ,EAARA;AADa,CAAjB","sourcesContent":["const fs = require('fs')\nconst path = require('path')\n\nconst paths = require('./paths')\n\nfunction* getFiles(dirName:any) {\n    const dirPath = path.join(paths.assets, dirName)\n    const fileNames = fs.readdirSync(dirPath)\n\n    for (const fileName of fileNames) {\n        const filePath = path.join(dirPath, fileName)\n        const file = fs.readFileSync(filePath, 'utf8')\n\n        yield {\n            fileName: fileName,\n            content: file,\n        }\n    }\n}\n\n\nmodule.exports = {\n    getFiles,\n}"]},"metadata":{},"sourceType":"script"}